package cv;
/**
 * <i>native declaration : cv\include\cvtypes.h:61</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvConnectedComp extends com.ochafik.lang.jnaerator.runtime.Structure {
	/// area of the connected component
	public double area;
	/// average color of the connected component
	public cxcore.CvScalar value;
	/// ROI of the component
	public cxcore.CvRect rect;
	/**
	 * optional component boundary<br>
	 * (the contour might have child contours corresponding to the holes)
	 */
	public cxcore.CvSeq.ByReference contour;
	public CvConnectedComp() {
		super();
	}
	/**
	 * @param area area of the connected component<br>
	 * @param value average color of the connected component<br>
	 * @param rect ROI of the component<br>
	 * @param contour optional component boundary<br>
	 * (the contour might have child contours corresponding to the holes)
	 */
	public CvConnectedComp(double area, cxcore.CvScalar value, cxcore.CvRect rect, cxcore.CvSeq.ByReference contour) {
		super();
		this.area = area;
		this.value = value;
		this.rect = rect;
		this.contour = contour;
	}
	public ByReference byReference() { return setupClone(new ByReference()); }
	public ByValue byValue() { return setupClone(new ByValue()); }
	public CvConnectedComp clone() { return setupClone(new CvConnectedComp()); }
	public static class ByReference extends CvConnectedComp implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends CvConnectedComp implements com.sun.jna.Structure.ByValue {}
}
