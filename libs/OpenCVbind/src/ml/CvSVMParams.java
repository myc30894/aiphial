package ml;
/**
 * SVM training parameters<br>
 * <i>native declaration : ml\include\ml.h:306</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvSVMParams extends com.ochafik.lang.jnaerator.runtime.Structure {
	public int svm_type;
	public int kernel_type;
	/// for poly
	public double degree;
	/// for poly/rbf/sigmoid
	public double gamma;
	/// for poly/sigmoid
	public double coef0;
	/// for CV_SVM_C_SVC, CV_SVM_EPS_SVR and CV_SVM_NU_SVR
	public double C;
	/// for CV_SVM_NU_SVC, CV_SVM_ONE_CLASS, and CV_SVM_NU_SVR
	public double nu;
	/// for CV_SVM_EPS_SVR
	public double p;
	/// for CV_SVM_C_SVC
	public cxcore.CvMat.ByReference class_weights;
	/// termination criteria
	public cxcore.CvTermCriteria term_crit;
	public CvSVMParams() {
		super();
	}
	public ByReference byReference() { return setupClone(new ByReference()); }
	public ByValue byValue() { return setupClone(new ByValue()); }
	public CvSVMParams clone() { return setupClone(new CvSVMParams()); }
	public static class ByReference extends CvSVMParams implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends CvSVMParams implements com.sun.jna.Structure.ByValue {}
}
