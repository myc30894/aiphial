package ml;
/**
 * JNA Wrapper for library <b>ml</b><br>
 * @see OpenCV.ml<br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface MlLibrary extends com.sun.jna.Library {
	/// <i>native declaration : ml\include\ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_NBAYES = "opencv-ml-bayesian";
	/// <i>native declaration : ml\include\ml.h</i>
	public static final int CV_VAR_ORDERED = 0;
	/// <i>native declaration : ml\include\ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_EM = "opencv-ml-em";
	/// <i>native declaration : ml\include\ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_BOOSTING = "opencv-ml-boost-tree";
	/// <i>native declaration : ml\include\ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_TREE = "opencv-ml-tree";
	/// <i>native declaration : ml\include\ml.h</i>
	public static final int CV_VAR_NUMERICAL = 0;
	/// <i>native declaration : ml\include\ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_KNN = "opencv-ml-knn";
	/// <i>native declaration : ml\include\ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_CNN = "opencv-ml-cnn";
	/// <i>native declaration : ml\include\ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_SVM = "opencv-ml-svm";
	/// <i>native declaration : ml\include\ml.h</i>
	public static final int CV_VAR_CATEGORICAL = 1;
	/// <i>native declaration : ml\include\ml.h</i>
	public static final int CV_TS_CONCENTRIC_SPHERES = 0;
	/// <i>native declaration : ml\include\ml.h</i>
	public static final double CV_LOG2PI = (1.8378770664093456);
	/// <i>native declaration : ml\include\ml.h</i>
	public static final int CV_ROW_SAMPLE = 1;
	/// <i>native declaration : ml\include\ml.h</i>
	public static final int CV_COL_SAMPLE = 0;
	/// <i>native declaration : ml\include\ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_RTREES = "opencv-ml-random-trees";
	/// <i>native declaration : ml\include\ml.h</i>
	public static final java.lang.String CV_TYPE_NAME_ML_ANN_MLP = "opencv-ml-ann-mlp";
	/**
	 * <i>native declaration : ml\include\ml.h:334</i><br>
	 * Conversion Error : Calc
	 */
	/**
	 * Original signature : <code>~CvSVMKernel()</code><br>
	 * <i>native declaration : ml\include\ml.h:335</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z12~CvSVMKernelv", "?~CvSVMKernel@@YAXXZ"})
	int CvSVMKernelDestructor();
	/**
	 * Original signature : <code>void clear()</code><br>
	 * <i>native declaration : ml\include\ml.h:337</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z5clearv", "?clear@@YAXXZ"})
	void clear();
	/**
	 * Original signature : <code>void calc(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:338</i><br>
	 * @deprecated use the safer methods {@link #calc(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc(int, int, com.sun.jna.ptr.PointerByReference, java.nio.FloatBuffer, java.nio.FloatBuffer)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z4calciiPPKfPKfPf", "?calc@@YAXHHPAPAMPAMPAM@Z"})
	@java.lang.Deprecated
	void calc(int vcount, int n, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:338</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z4calciiPPKfPKfPf", "?calc@@YAXHHPAPAMPAMPAM@Z"})
	void calc(int vcount, int n, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:338</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z4calciiPPKfPKfPf", "?calc@@YAXHHPAPAMPAMPAM@Z"})
	void calc(int vcount, int n, com.sun.jna.ptr.PointerByReference vecs, java.nio.FloatBuffer another, java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_non_rbf_base(int, int, const float**, const float*, float*, double, double)</code><br>
	 * <i>native declaration : ml\include\ml.h:343</i><br>
	 * @deprecated use the safer methods {@link #calc_non_rbf_base(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer, double, double)} and {@link #calc_non_rbf_base(int, int, com.sun.jna.ptr.PointerByReference, java.nio.FloatBuffer, java.nio.FloatBuffer, double, double)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z17calc_non_rbf_baseiiPPKfPKfPfdd", "?calc_non_rbf_base@@YAXHHPAPAMPAMPAMNN@Z"})
	@java.lang.Deprecated
	void calc_non_rbf_base(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results, double alpha, double beta);
	/**
	 * Original signature : <code>void calc_non_rbf_base(int, int, const float**, const float*, float*, double, double)</code><br>
	 * <i>native declaration : ml\include\ml.h:343</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z17calc_non_rbf_baseiiPPKfPKfPfdd", "?calc_non_rbf_base@@YAXHHPAPAMPAMPAMNN@Z"})
	void calc_non_rbf_base(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results, double alpha, double beta);
	/**
	 * Original signature : <code>void calc_non_rbf_base(int, int, const float**, const float*, float*, double, double)</code><br>
	 * <i>native declaration : ml\include\ml.h:343</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z17calc_non_rbf_baseiiPPKfPKfPfdd", "?calc_non_rbf_base@@YAXHHPAPAMPAMPAMNN@Z"})
	void calc_non_rbf_base(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, java.nio.FloatBuffer another, java.nio.FloatBuffer results, double alpha, double beta);
	/**
	 * Original signature : <code>void calc_linear(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:347</i><br>
	 * @deprecated use the safer methods {@link #calc_linear(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc_linear(int, int, com.sun.jna.ptr.PointerByReference, java.nio.FloatBuffer, java.nio.FloatBuffer)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z11calc_lineariiPPKfPKfPf", "?calc_linear@@YAXHHPAPAMPAMPAM@Z"})
	@java.lang.Deprecated
	void calc_linear(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc_linear(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:347</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z11calc_lineariiPPKfPKfPf", "?calc_linear@@YAXHHPAPAMPAMPAM@Z"})
	void calc_linear(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_linear(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:347</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z11calc_lineariiPPKfPKfPf", "?calc_linear@@YAXHHPAPAMPAMPAM@Z"})
	void calc_linear(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, java.nio.FloatBuffer another, java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_rbf(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:349</i><br>
	 * @deprecated use the safer methods {@link #calc_rbf(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc_rbf(int, int, com.sun.jna.ptr.PointerByReference, java.nio.FloatBuffer, java.nio.FloatBuffer)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z8calc_rbfiiPPKfPKfPf", "?calc_rbf@@YAXHHPAPAMPAMPAM@Z"})
	@java.lang.Deprecated
	void calc_rbf(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc_rbf(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:349</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z8calc_rbfiiPPKfPKfPf", "?calc_rbf@@YAXHHPAPAMPAMPAM@Z"})
	void calc_rbf(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_rbf(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:349</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z8calc_rbfiiPPKfPKfPf", "?calc_rbf@@YAXHHPAPAMPAMPAM@Z"})
	void calc_rbf(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, java.nio.FloatBuffer another, java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_poly(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:351</i><br>
	 * @deprecated use the safer methods {@link #calc_poly(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc_poly(int, int, com.sun.jna.ptr.PointerByReference, java.nio.FloatBuffer, java.nio.FloatBuffer)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z9calc_polyiiPPKfPKfPf", "?calc_poly@@YAXHHPAPAMPAMPAM@Z"})
	@java.lang.Deprecated
	void calc_poly(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc_poly(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:351</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z9calc_polyiiPPKfPKfPf", "?calc_poly@@YAXHHPAPAMPAMPAM@Z"})
	void calc_poly(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_poly(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:351</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z9calc_polyiiPPKfPKfPf", "?calc_poly@@YAXHHPAPAMPAMPAM@Z"})
	void calc_poly(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, java.nio.FloatBuffer another, java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_sigmoid(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:353</i><br>
	 * @deprecated use the safer methods {@link #calc_sigmoid(int, int, com.sun.jna.ptr.PointerByReference, float[], java.nio.FloatBuffer)} and {@link #calc_sigmoid(int, int, com.sun.jna.ptr.PointerByReference, java.nio.FloatBuffer, java.nio.FloatBuffer)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z12calc_sigmoidiiPPKfPKfPf", "?calc_sigmoid@@YAXHHPAPAMPAMPAM@Z"})
	@java.lang.Deprecated
	void calc_sigmoid(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, com.sun.jna.ptr.FloatByReference another, com.sun.jna.ptr.FloatByReference results);
	/**
	 * Original signature : <code>void calc_sigmoid(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:353</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z12calc_sigmoidiiPPKfPKfPf", "?calc_sigmoid@@YAXHHPAPAMPAMPAM@Z"})
	void calc_sigmoid(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, float another[], java.nio.FloatBuffer results);
	/**
	 * Original signature : <code>void calc_sigmoid(int, int, const float**, const float*, float*)</code><br>
	 * <i>native declaration : ml\include\ml.h:353</i>
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z12calc_sigmoidiiPPKfPKfPf", "?calc_sigmoid@@YAXHHPAPAMPAMPAM@Z"})
	void calc_sigmoid(int vec_count, int vec_size, com.sun.jna.ptr.PointerByReference vecs, java.nio.FloatBuffer another, java.nio.FloatBuffer results);
}
