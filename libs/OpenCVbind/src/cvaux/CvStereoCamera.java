package cvaux;
/**
 * <i>native declaration : cvaux\include\cvaux.h:516</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvStereoCamera extends com.ochafik.lang.jnaerator.runtime.Structure {
	/// two individual camera parameters
	public cvaux.CvCamera.ByReference[] camera = new cvaux.CvCamera.ByReference[(2)];
	/// fundamental matrix
	public float[] fundMatr = new float[(9)];
	/// New part for stereo
	public cxcore.CvPoint3D32f[] epipole = new cxcore.CvPoint3D32f[(2)];
	/**
	 * coordinates of destination quadrangle after<br>
	 * epipolar geometry rectification
	 */
	public cxcore.CvPoint2D32f[] quad = new cxcore.CvPoint2D32f[2 * 4];
	/// coefficients for transformation
	public double[] coeffs = new double[2 * 3 * 3];
	public cxcore.CvPoint2D32f[] border = new cxcore.CvPoint2D32f[2 * 4];
	public cxcore.CvSize warpSize;
	public cvaux.CvStereoLineCoeff.ByReference lineCoeffs;
	/// flag set to 1 if need to swap cameras for good reconstruction
	public int needSwapCameras;
	public float[] rotMatrix = new float[(9)];
	public float[] transVector = new float[(3)];
	public CvStereoCamera() {
		super();
	}
	public ByReference byReference() { return setupClone(new ByReference()); }
	public ByValue byValue() { return setupClone(new ByValue()); }
	public CvStereoCamera clone() { return setupClone(new CvStereoCamera()); }
	public static class ByReference extends CvStereoCamera implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends CvStereoCamera implements com.sun.jna.Structure.ByValue {}
}
