package cxcore;
/**
 * <i>native declaration : cxcore\include\cxtypes.h:319</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IplImage extends com.ochafik.lang.jnaerator.runtime.Structure {
	/// sizeof(IplImage)
	public int nSize;
	/// version (=0)
	public int ID;
	/// Most of OpenCV functions support 1,2,3 or 4 channels
	public int nChannels;
	/// Ignored by OpenCV
	public int alphaChannel;
	/**
	 * Pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16S,<br>
	 * IPL_DEPTH_32S, IPL_DEPTH_32F and IPL_DEPTH_64F are supported.
	 */
	public int depth;
	/// Ignored by OpenCV
	public byte[] colorModel = new byte[(4)];
	/// ditto
	public byte[] channelSeq = new byte[(4)];
	/**
	 * 0 - interleaved color channels, 1 - separate color channels.<br>
	 * cvCreateImage can only create interleaved images
	 */
	public int dataOrder;
	/**
	 * 0 - top-left origin,<br>
	 * 1 - bottom-left origin (Windows bitmaps style).
	 */
	public int origin;
	/**
	 * Alignment of image rows (4 or 8).<br>
	 * OpenCV ignores it and uses widthStep instead.
	 */
	public int align;
	/// Image width in pixels.
	public int width;
	/// Image height in pixels.
	public int height;
	/// Image ROI. If NULL, the whole image is selected.
	public cxcore.IplROI.ByReference roi;
	/// Must be NULL.
	public cxcore.IplImage.ByReference maskROI;
	/// "           "
	public com.sun.jna.Pointer imageId;
	/// "           "
	public cxcore.CxcoreLibrary._IplTileInfo tileInfo;
	/**
	 * Image data size in bytes<br>
	 * (==image->height*image->widthStep<br>
	 * in case of interleaved data)
	 */
	public int imageSize;
	/// Pointer to aligned image data.
	public com.sun.jna.ptr.ByteByReference imageData;
	/// Size of aligned image row in bytes.
	public int widthStep;
	/// Ignored by OpenCV.
	public int[] BorderMode = new int[(4)];
	/// Ditto.
	public int[] BorderConst = new int[(4)];
	/**
	 * Pointer to very origin of image data<br>
	 * (not necessarily aligned) -<br>
	 * needed for correct deallocation
	 */
	public com.sun.jna.ptr.ByteByReference imageDataOrigin;
	public IplImage() {
		super();
	}
	public ByReference byReference() { return setupClone(new ByReference()); }
	public ByValue byValue() { return setupClone(new ByValue()); }
	public IplImage clone() { return setupClone(new IplImage()); }
	public static class ByReference extends IplImage implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends IplImage implements com.sun.jna.Structure.ByValue {}
}
