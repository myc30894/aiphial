package cxcore;
/**
 * <i>native declaration : cxcore\include\cxtypes.h:656</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvMatND extends com.ochafik.lang.jnaerator.runtime.Structure {
	public int type;
	public int dims;
	public com.sun.jna.ptr.IntByReference refcount;
	public int hdr_refcount;
	public data_union data;
	public cxcore.CvMatND.dim_struct[] dim = new cxcore.CvMatND.dim_struct[(32)];
	/// <i>native declaration : cxcore\include\cxtypes.h:664</i>
	public static class data_union extends com.ochafik.lang.jnaerator.runtime.Union {
		public com.sun.jna.ptr.ByteByReference ptr;
		public com.sun.jna.ptr.FloatByReference fl;
		public com.sun.jna.ptr.DoubleByReference db;
		public com.sun.jna.ptr.IntByReference i;
		public com.sun.jna.ptr.ShortByReference s;
		public data_union() {
			super();
		}
		public data_union(com.sun.jna.ptr.DoubleByReference db) {
			super();
			this.db = db;
			setType(com.sun.jna.ptr.DoubleByReference.class);
		}
		public data_union(com.sun.jna.ptr.ShortByReference s) {
			super();
			this.s = s;
			setType(com.sun.jna.ptr.ShortByReference.class);
		}
		public data_union(com.sun.jna.ptr.ByteByReference ptr) {
			super();
			this.ptr = ptr;
			setType(com.sun.jna.ptr.ByteByReference.class);
		}
		public data_union(com.sun.jna.ptr.IntByReference i) {
			super();
			this.i = i;
			setType(com.sun.jna.ptr.IntByReference.class);
		}
		public data_union(com.sun.jna.ptr.FloatByReference fl) {
			super();
			this.fl = fl;
			setType(com.sun.jna.ptr.FloatByReference.class);
		}
		public ByReference byReference() { return setupClone(new ByReference()); }
		public ByValue byValue() { return setupClone(new ByValue()); }
		public data_union clone() { return setupClone(new data_union()); }
		public static class ByReference extends data_union implements com.sun.jna.Structure.ByReference {}
		public static class ByValue extends data_union implements com.sun.jna.Structure.ByValue {}
	}
	/// <i>native declaration : cxcore\include\cxtypes.h:673</i>
	public static class dim_struct extends com.ochafik.lang.jnaerator.runtime.Structure {
		public int size;
		public int step;
		public dim_struct() {
			super();
		}
		public dim_struct(int size, int step) {
			super();
			this.size = size;
			this.step = step;
		}
		public ByReference byReference() { return setupClone(new ByReference()); }
		public ByValue byValue() { return setupClone(new ByValue()); }
		public dim_struct clone() { return setupClone(new dim_struct()); }
		public static class ByReference extends dim_struct implements com.sun.jna.Structure.ByReference {}
		public static class ByValue extends dim_struct implements com.sun.jna.Structure.ByValue {}
	}
	public CvMatND() {
		super();
	}
	public CvMatND(int type, int dims, com.sun.jna.ptr.IntByReference refcount, int hdr_refcount, data_union data, cxcore.CvMatND.dim_struct dim[]) {
		super();
		this.type = type;
		this.dims = dims;
		this.refcount = refcount;
		this.hdr_refcount = hdr_refcount;
		this.data = data;
		if (dim.length != this.dim.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.dim = dim;
	}
	public ByReference byReference() { return setupClone(new ByReference()); }
	public ByValue byValue() { return setupClone(new ByValue()); }
	public CvMatND clone() { return setupClone(new CvMatND()); }
	public static class ByReference extends CvMatND implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends CvMatND implements com.sun.jna.Structure.ByValue {}
}
